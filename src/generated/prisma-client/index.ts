// Code generated by Prisma (prisma@1.23.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  listing: (where?: ListingWhereInput) => Promise<boolean>;
  media: (where?: MediaWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Comment>;
  commentsConnection: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentConnectionPromise;
  listing: (where: ListingWhereUniqueInput) => ListingPromise;
  listings: (
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Listing>;
  listingsConnection: (
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ListingConnectionPromise;
  media: (where: MediaWhereUniqueInput) => MediaPromise;
  medias: (
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Media>;
  mediasConnection: (
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MediaConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (
    args: { data: CommentUpdateInput; where: CommentWhereUniqueInput }
  ) => CommentPromise;
  updateManyComments: (
    args: { data: CommentUpdateManyMutationInput; where?: CommentWhereInput }
  ) => BatchPayloadPromise;
  upsertComment: (
    args: {
      where: CommentWhereUniqueInput;
      create: CommentCreateInput;
      update: CommentUpdateInput;
    }
  ) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createListing: (data: ListingCreateInput) => ListingPromise;
  updateListing: (
    args: { data: ListingUpdateInput; where: ListingWhereUniqueInput }
  ) => ListingPromise;
  updateManyListings: (
    args: { data: ListingUpdateManyMutationInput; where?: ListingWhereInput }
  ) => BatchPayloadPromise;
  upsertListing: (
    args: {
      where: ListingWhereUniqueInput;
      create: ListingCreateInput;
      update: ListingUpdateInput;
    }
  ) => ListingPromise;
  deleteListing: (where: ListingWhereUniqueInput) => ListingPromise;
  deleteManyListings: (where?: ListingWhereInput) => BatchPayloadPromise;
  createMedia: (data: MediaCreateInput) => MediaPromise;
  updateMedia: (
    args: { data: MediaUpdateInput; where: MediaWhereUniqueInput }
  ) => MediaPromise;
  updateManyMedias: (
    args: { data: MediaUpdateManyMutationInput; where?: MediaWhereInput }
  ) => BatchPayloadPromise;
  upsertMedia: (
    args: {
      where: MediaWhereUniqueInput;
      create: MediaCreateInput;
      update: MediaUpdateInput;
    }
  ) => MediaPromise;
  deleteMedia: (where: MediaWhereUniqueInput) => MediaPromise;
  deleteManyMedias: (where?: MediaWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  listing: (
    where?: ListingSubscriptionWhereInput
  ) => ListingSubscriptionPayloadSubscription;
  media: (
    where?: MediaSubscriptionWhereInput
  ) => MediaSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ListingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "price_ASC"
  | "price_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "cognitoId_ASC"
  | "cognitoId_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC";

export type MediaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "localSource_ASC"
  | "localSource_DESC"
  | "uploadUri_ASC"
  | "uploadUri_DESC"
  | "bucket_ASC"
  | "bucket_DESC"
  | "key_ASC"
  | "key_DESC"
  | "region_ASC"
  | "region_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "text_ASC"
  | "text_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  update?:
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput;
  upsert?:
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ListingUpdateManyWithoutUserInput {
  create?: ListingCreateWithoutUserInput[] | ListingCreateWithoutUserInput;
  delete?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  connect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  disconnect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  update?:
    | ListingUpdateWithWhereUniqueWithoutUserInput[]
    | ListingUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ListingUpsertWithWhereUniqueWithoutUserInput[]
    | ListingUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: ListingScalarWhereInput[] | ListingScalarWhereInput;
  updateMany?:
    | ListingUpdateManyWithWhereNestedInput[]
    | ListingUpdateManyWithWhereNestedInput;
}

export interface ListingWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  price?: String;
  price_not?: String;
  price_in?: String[] | String;
  price_not_in?: String[] | String;
  price_lt?: String;
  price_lte?: String;
  price_gt?: String;
  price_gte?: String;
  price_contains?: String;
  price_not_contains?: String;
  price_starts_with?: String;
  price_not_starts_with?: String;
  price_ends_with?: String;
  price_not_ends_with?: String;
  user?: UserWhereInput;
  photos_every?: MediaWhereInput;
  photos_some?: MediaWhereInput;
  photos_none?: MediaWhereInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  AND?: ListingWhereInput[] | ListingWhereInput;
  OR?: ListingWhereInput[] | ListingWhereInput;
  NOT?: ListingWhereInput[] | ListingWhereInput;
}

export interface ListingUpdateWithWhereUniqueWithoutUserInput {
  where: ListingWhereUniqueInput;
  data: ListingUpdateWithoutUserDataInput;
}

export interface MediaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  filename?: String;
  filename_not?: String;
  filename_in?: String[] | String;
  filename_not_in?: String[] | String;
  filename_lt?: String;
  filename_lte?: String;
  filename_gt?: String;
  filename_gte?: String;
  filename_contains?: String;
  filename_not_contains?: String;
  filename_starts_with?: String;
  filename_not_starts_with?: String;
  filename_ends_with?: String;
  filename_not_ends_with?: String;
  localSource?: String;
  localSource_not?: String;
  localSource_in?: String[] | String;
  localSource_not_in?: String[] | String;
  localSource_lt?: String;
  localSource_lte?: String;
  localSource_gt?: String;
  localSource_gte?: String;
  localSource_contains?: String;
  localSource_not_contains?: String;
  localSource_starts_with?: String;
  localSource_not_starts_with?: String;
  localSource_ends_with?: String;
  localSource_not_ends_with?: String;
  uploadUri?: String;
  uploadUri_not?: String;
  uploadUri_in?: String[] | String;
  uploadUri_not_in?: String[] | String;
  uploadUri_lt?: String;
  uploadUri_lte?: String;
  uploadUri_gt?: String;
  uploadUri_gte?: String;
  uploadUri_contains?: String;
  uploadUri_not_contains?: String;
  uploadUri_starts_with?: String;
  uploadUri_not_starts_with?: String;
  uploadUri_ends_with?: String;
  uploadUri_not_ends_with?: String;
  bucket?: String;
  bucket_not?: String;
  bucket_in?: String[] | String;
  bucket_not_in?: String[] | String;
  bucket_lt?: String;
  bucket_lte?: String;
  bucket_gt?: String;
  bucket_gte?: String;
  bucket_contains?: String;
  bucket_not_contains?: String;
  bucket_starts_with?: String;
  bucket_not_starts_with?: String;
  bucket_ends_with?: String;
  bucket_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  region?: String;
  region_not?: String;
  region_in?: String[] | String;
  region_not_in?: String[] | String;
  region_lt?: String;
  region_lte?: String;
  region_gt?: String;
  region_gte?: String;
  region_contains?: String;
  region_not_contains?: String;
  region_starts_with?: String;
  region_not_starts_with?: String;
  region_ends_with?: String;
  region_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: MediaWhereInput[] | MediaWhereInput;
  OR?: MediaWhereInput[] | MediaWhereInput;
  NOT?: MediaWhereInput[] | MediaWhereInput;
}

export interface CommentCreateManyInput {
  create?: CommentCreateInput[] | CommentCreateInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface ListingScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  price?: String;
  price_not?: String;
  price_in?: String[] | String;
  price_not_in?: String[] | String;
  price_lt?: String;
  price_lte?: String;
  price_gt?: String;
  price_gte?: String;
  price_contains?: String;
  price_not_contains?: String;
  price_starts_with?: String;
  price_not_starts_with?: String;
  price_ends_with?: String;
  price_not_ends_with?: String;
  AND?: ListingScalarWhereInput[] | ListingScalarWhereInput;
  OR?: ListingScalarWhereInput[] | ListingScalarWhereInput;
  NOT?: ListingScalarWhereInput[] | ListingScalarWhereInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface ListingUpdateWithoutUserDataInput {
  name?: String;
  description?: String;
  price?: String;
  photos?: MediaUpdateManyInput;
  comments?: CommentUpdateManyWithoutListingInput;
}

export interface CommentUpdateInput {
  text?: String;
  listing?: ListingUpdateOneRequiredWithoutCommentsInput;
  replies?: CommentUpdateManyInput;
  photos?: MediaUpdateManyInput;
  user?: UserUpdateOneRequiredInput;
}

export interface MediaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MediaWhereInput;
  AND?: MediaSubscriptionWhereInput[] | MediaSubscriptionWhereInput;
  OR?: MediaSubscriptionWhereInput[] | MediaSubscriptionWhereInput;
  NOT?: MediaSubscriptionWhereInput[] | MediaSubscriptionWhereInput;
}

export interface ListingUpdateOneRequiredWithoutCommentsInput {
  create?: ListingCreateWithoutCommentsInput;
  update?: ListingUpdateWithoutCommentsDataInput;
  upsert?: ListingUpsertWithoutCommentsInput;
  connect?: ListingWhereUniqueInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface ListingUpdateWithoutCommentsDataInput {
  name?: String;
  description?: String;
  price?: String;
  user?: UserUpdateOneRequiredWithoutListingsInput;
  photos?: MediaUpdateManyInput;
}

export interface UserUpdateInput {
  firstName?: String;
  lastName?: String;
  cognitoId?: String;
  email?: String;
  phone?: String;
  listings?: ListingUpdateManyWithoutUserInput;
  photo?: MediaUpdateOneWithoutUserInput;
  friends?: UserUpdateManyInput;
}

export interface UserUpdateOneRequiredWithoutListingsInput {
  create?: UserCreateWithoutListingsInput;
  update?: UserUpdateWithoutListingsDataInput;
  upsert?: UserUpsertWithoutListingsInput;
  connect?: UserWhereUniqueInput;
}

export interface MediaUpdateInput {
  filename?: String;
  localSource?: String;
  uploadUri?: String;
  bucket?: String;
  key?: String;
  region?: String;
  user?: UserUpdateOneRequiredWithoutPhotoInput;
}

export interface UserUpdateWithoutListingsDataInput {
  firstName?: String;
  lastName?: String;
  cognitoId?: String;
  email?: String;
  phone?: String;
  photo?: MediaUpdateOneWithoutUserInput;
  friends?: UserUpdateManyInput;
}

export type ListingWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MediaUpdateOneWithoutUserInput {
  create?: MediaCreateWithoutUserInput;
  update?: MediaUpdateWithoutUserDataInput;
  upsert?: MediaUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: MediaWhereUniqueInput;
}

export interface ListingCreateInput {
  name: String;
  description?: String;
  price?: String;
  user: UserCreateOneWithoutListingsInput;
  photos?: MediaCreateManyInput;
  comments?: CommentCreateManyWithoutListingInput;
}

export interface MediaUpdateWithoutUserDataInput {
  filename?: String;
  localSource?: String;
  uploadUri?: String;
  bucket?: String;
  key?: String;
  region?: String;
}

export type MediaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MediaUpsertWithoutUserInput {
  update: MediaUpdateWithoutUserDataInput;
  create: MediaCreateWithoutUserInput;
}

export interface UserUpsertWithoutListingsInput {
  update: UserUpdateWithoutListingsDataInput;
  create: UserCreateWithoutListingsInput;
}

export interface ListingUpdateManyDataInput {
  name?: String;
  description?: String;
  price?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  cognitoId?: String;
  email?: String;
}>;

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  cognitoId?: String;
  cognitoId_not?: String;
  cognitoId_in?: String[] | String;
  cognitoId_not_in?: String[] | String;
  cognitoId_lt?: String;
  cognitoId_lte?: String;
  cognitoId_gt?: String;
  cognitoId_gte?: String;
  cognitoId_contains?: String;
  cognitoId_not_contains?: String;
  cognitoId_starts_with?: String;
  cognitoId_not_starts_with?: String;
  cognitoId_ends_with?: String;
  cognitoId_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateDataInput {
  firstName?: String;
  lastName?: String;
  cognitoId?: String;
  email?: String;
  phone?: String;
  listings?: ListingUpdateManyWithoutUserInput;
  photo?: MediaUpdateOneWithoutUserInput;
  friends?: UserUpdateManyInput;
}

export interface ListingCreateOneWithoutCommentsInput {
  create?: ListingCreateWithoutCommentsInput;
  connect?: ListingWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  cognitoId?: String;
  cognitoId_not?: String;
  cognitoId_in?: String[] | String;
  cognitoId_not_in?: String[] | String;
  cognitoId_lt?: String;
  cognitoId_lte?: String;
  cognitoId_gt?: String;
  cognitoId_gte?: String;
  cognitoId_contains?: String;
  cognitoId_not_contains?: String;
  cognitoId_starts_with?: String;
  cognitoId_not_starts_with?: String;
  cognitoId_ends_with?: String;
  cognitoId_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  listings_every?: ListingWhereInput;
  listings_some?: ListingWhereInput;
  listings_none?: ListingWhereInput;
  photo?: MediaWhereInput;
  friends_every?: UserWhereInput;
  friends_some?: UserWhereInput;
  friends_none?: UserWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateOneWithoutListingsInput {
  create?: UserCreateWithoutListingsInput;
  connect?: UserWhereUniqueInput;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  listing?: ListingWhereInput;
  replies_every?: CommentWhereInput;
  replies_some?: CommentWhereInput;
  replies_none?: CommentWhereInput;
  photos_every?: MediaWhereInput;
  photos_some?: MediaWhereInput;
  photos_none?: MediaWhereInput;
  user?: UserWhereInput;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface MediaCreateOneWithoutUserInput {
  create?: MediaCreateWithoutUserInput;
  connect?: MediaWhereUniqueInput;
}

export interface ListingUpdateManyWithWhereNestedInput {
  where: ListingScalarWhereInput;
  data: ListingUpdateManyDataInput;
}

export interface UserCreateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface MediaUpdateManyInput {
  create?: MediaCreateInput[] | MediaCreateInput;
  update?:
    | MediaUpdateWithWhereUniqueNestedInput[]
    | MediaUpdateWithWhereUniqueNestedInput;
  upsert?:
    | MediaUpsertWithWhereUniqueNestedInput[]
    | MediaUpsertWithWhereUniqueNestedInput;
  delete?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
  connect?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
  disconnect?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
  deleteMany?: MediaScalarWhereInput[] | MediaScalarWhereInput;
  updateMany?:
    | MediaUpdateManyWithWhereNestedInput[]
    | MediaUpdateManyWithWhereNestedInput;
}

export interface ListingCreateManyWithoutUserInput {
  create?: ListingCreateWithoutUserInput[] | ListingCreateWithoutUserInput;
  connect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
}

export interface MediaUpdateWithWhereUniqueNestedInput {
  where: MediaWhereUniqueInput;
  data: MediaUpdateDataInput;
}

export interface MediaCreateManyInput {
  create?: MediaCreateInput[] | MediaCreateInput;
  connect?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
}

export interface MediaUpdateDataInput {
  filename?: String;
  localSource?: String;
  uploadUri?: String;
  bucket?: String;
  key?: String;
  region?: String;
  user?: UserUpdateOneRequiredWithoutPhotoInput;
}

export interface UserCreateOneWithoutPhotoInput {
  create?: UserCreateWithoutPhotoInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutPhotoInput {
  create?: UserCreateWithoutPhotoInput;
  update?: UserUpdateWithoutPhotoDataInput;
  upsert?: UserUpsertWithoutPhotoInput;
  connect?: UserWhereUniqueInput;
}

export interface CommentCreateManyWithoutListingInput {
  create?:
    | CommentCreateWithoutListingInput[]
    | CommentCreateWithoutListingInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface UserUpdateWithoutPhotoDataInput {
  firstName?: String;
  lastName?: String;
  cognitoId?: String;
  email?: String;
  phone?: String;
  listings?: ListingUpdateManyWithoutUserInput;
  friends?: UserUpdateManyInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpsertWithoutPhotoInput {
  update: UserUpdateWithoutPhotoDataInput;
  create: UserCreateWithoutPhotoInput;
}

export interface UserUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  cognitoId?: String;
  email?: String;
  phone?: String;
}

export interface MediaUpsertWithWhereUniqueNestedInput {
  where: MediaWhereUniqueInput;
  update: MediaUpdateDataInput;
  create: MediaCreateInput;
}

export interface ListingUpdateManyMutationInput {
  name?: String;
  description?: String;
  price?: String;
}

export interface MediaScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  filename?: String;
  filename_not?: String;
  filename_in?: String[] | String;
  filename_not_in?: String[] | String;
  filename_lt?: String;
  filename_lte?: String;
  filename_gt?: String;
  filename_gte?: String;
  filename_contains?: String;
  filename_not_contains?: String;
  filename_starts_with?: String;
  filename_not_starts_with?: String;
  filename_ends_with?: String;
  filename_not_ends_with?: String;
  localSource?: String;
  localSource_not?: String;
  localSource_in?: String[] | String;
  localSource_not_in?: String[] | String;
  localSource_lt?: String;
  localSource_lte?: String;
  localSource_gt?: String;
  localSource_gte?: String;
  localSource_contains?: String;
  localSource_not_contains?: String;
  localSource_starts_with?: String;
  localSource_not_starts_with?: String;
  localSource_ends_with?: String;
  localSource_not_ends_with?: String;
  uploadUri?: String;
  uploadUri_not?: String;
  uploadUri_in?: String[] | String;
  uploadUri_not_in?: String[] | String;
  uploadUri_lt?: String;
  uploadUri_lte?: String;
  uploadUri_gt?: String;
  uploadUri_gte?: String;
  uploadUri_contains?: String;
  uploadUri_not_contains?: String;
  uploadUri_starts_with?: String;
  uploadUri_not_starts_with?: String;
  uploadUri_ends_with?: String;
  uploadUri_not_ends_with?: String;
  bucket?: String;
  bucket_not?: String;
  bucket_in?: String[] | String;
  bucket_not_in?: String[] | String;
  bucket_lt?: String;
  bucket_lte?: String;
  bucket_gt?: String;
  bucket_gte?: String;
  bucket_contains?: String;
  bucket_not_contains?: String;
  bucket_starts_with?: String;
  bucket_not_starts_with?: String;
  bucket_ends_with?: String;
  bucket_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  region?: String;
  region_not?: String;
  region_in?: String[] | String;
  region_not_in?: String[] | String;
  region_lt?: String;
  region_lte?: String;
  region_gt?: String;
  region_gte?: String;
  region_contains?: String;
  region_not_contains?: String;
  region_starts_with?: String;
  region_not_starts_with?: String;
  region_ends_with?: String;
  region_not_ends_with?: String;
  AND?: MediaScalarWhereInput[] | MediaScalarWhereInput;
  OR?: MediaScalarWhereInput[] | MediaScalarWhereInput;
  NOT?: MediaScalarWhereInput[] | MediaScalarWhereInput;
}

export interface CommentUpdateManyMutationInput {
  text?: String;
}

export interface MediaUpdateManyWithWhereNestedInput {
  where: MediaScalarWhereInput;
  data: MediaUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstName?: String;
  lastName?: String;
  cognitoId?: String;
  email?: String;
  phone?: String;
}

export interface MediaUpdateManyDataInput {
  filename?: String;
  localSource?: String;
  uploadUri?: String;
  bucket?: String;
  key?: String;
  region?: String;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface CommentUpdateManyWithoutListingInput {
  create?:
    | CommentCreateWithoutListingInput[]
    | CommentCreateWithoutListingInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutListingInput[]
    | CommentUpdateWithWhereUniqueWithoutListingInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutListingInput[]
    | CommentUpsertWithWhereUniqueWithoutListingInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface ListingCreateWithoutCommentsInput {
  name: String;
  description?: String;
  price?: String;
  user: UserCreateOneWithoutListingsInput;
  photos?: MediaCreateManyInput;
}

export interface CommentUpdateWithWhereUniqueWithoutListingInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutListingDataInput;
}

export interface MediaCreateWithoutUserInput {
  filename: String;
  localSource: String;
  uploadUri?: String;
  bucket?: String;
  key?: String;
  region?: String;
}

export interface CommentUpdateWithoutListingDataInput {
  text?: String;
  replies?: CommentUpdateManyInput;
  photos?: MediaUpdateManyInput;
  user?: UserUpdateOneRequiredInput;
}

export interface ListingCreateWithoutUserInput {
  name: String;
  description?: String;
  price?: String;
  photos?: MediaCreateManyInput;
  comments?: CommentCreateManyWithoutListingInput;
}

export interface CommentUpdateManyInput {
  create?: CommentCreateInput[] | CommentCreateInput;
  update?:
    | CommentUpdateWithWhereUniqueNestedInput[]
    | CommentUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CommentUpsertWithWhereUniqueNestedInput[]
    | CommentUpsertWithWhereUniqueNestedInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutPhotoInput {
  firstName?: String;
  lastName?: String;
  cognitoId: String;
  email: String;
  phone: String;
  listings?: ListingCreateManyWithoutUserInput;
  friends?: UserCreateManyInput;
}

export interface CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateDataInput;
}

export interface ListingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ListingWhereInput;
  AND?: ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput;
  OR?: ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput;
  NOT?: ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput;
}

export interface CommentUpdateDataInput {
  text?: String;
  listing?: ListingUpdateOneRequiredWithoutCommentsInput;
  replies?: CommentUpdateManyInput;
  photos?: MediaUpdateManyInput;
  user?: UserUpdateOneRequiredInput;
}

export interface ListingUpdateInput {
  name?: String;
  description?: String;
  price?: String;
  user?: UserUpdateOneRequiredWithoutListingsInput;
  photos?: MediaUpdateManyInput;
  comments?: CommentUpdateManyWithoutListingInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserCreateWithoutListingsInput {
  firstName?: String;
  lastName?: String;
  cognitoId: String;
  email: String;
  phone: String;
  photo?: MediaCreateOneWithoutUserInput;
  friends?: UserCreateManyInput;
}

export interface CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface MediaCreateInput {
  filename: String;
  localSource: String;
  uploadUri?: String;
  bucket?: String;
  key?: String;
  region?: String;
  user: UserCreateOneWithoutPhotoInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface MediaUpdateManyMutationInput {
  filename?: String;
  localSource?: String;
  uploadUri?: String;
  bucket?: String;
  key?: String;
  region?: String;
}

export interface ListingUpsertWithWhereUniqueWithoutUserInput {
  where: ListingWhereUniqueInput;
  update: ListingUpdateWithoutUserDataInput;
  create: ListingCreateWithoutUserInput;
}

export interface CommentUpsertWithWhereUniqueWithoutListingInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutListingDataInput;
  create: CommentCreateWithoutListingInput;
}

export interface CommentUpdateManyDataInput {
  text?: String;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface ListingUpsertWithoutCommentsInput {
  update: ListingUpdateWithoutCommentsDataInput;
  create: ListingCreateWithoutCommentsInput;
}

export interface CommentCreateWithoutListingInput {
  text: String;
  replies?: CommentCreateManyInput;
  photos?: MediaCreateManyInput;
  user: UserCreateOneInput;
}

export interface UserCreateInput {
  firstName?: String;
  lastName?: String;
  cognitoId: String;
  email: String;
  phone: String;
  listings?: ListingCreateManyWithoutUserInput;
  photo?: MediaCreateOneWithoutUserInput;
  friends?: UserCreateManyInput;
}

export interface CommentCreateInput {
  text: String;
  listing: ListingCreateOneWithoutCommentsInput;
  replies?: CommentCreateManyInput;
  photos?: MediaCreateManyInput;
  user: UserCreateOneInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  firstName?: String;
  lastName?: String;
  cognitoId: String;
  email: String;
  phone: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  cognitoId: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  cognitoId: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Listing {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
  price?: String;
}

export interface ListingPromise extends Promise<Listing>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<String>;
  user: <T = UserPromise>() => T;
  photos: <T = FragmentableArray<Media>>(
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  comments: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ListingSubscription
  extends Promise<AsyncIterator<Listing>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  photos: <T = Promise<AsyncIterator<MediaSubscription>>>(
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  firstName?: String;
  lastName?: String;
  cognitoId: String;
  email: String;
  phone: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  cognitoId: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  listings: <T = FragmentableArray<Listing>>(
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  photo: <T = MediaPromise>() => T;
  friends: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  cognitoId: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  listings: <T = Promise<AsyncIterator<ListingSubscription>>>(
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  photo: <T = MediaSubscription>() => T;
  friends: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Media {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  localSource: String;
  uploadUri?: String;
  bucket?: String;
  key?: String;
  region?: String;
}

export interface MediaPromise extends Promise<Media>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  localSource: () => Promise<String>;
  uploadUri: () => Promise<String>;
  bucket: () => Promise<String>;
  key: () => Promise<String>;
  region: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface MediaSubscription
  extends Promise<AsyncIterator<Media>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  localSource: () => Promise<AsyncIterator<String>>;
  uploadUri: () => Promise<AsyncIterator<String>>;
  bucket: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMedia {
  count: Int;
}

export interface AggregateMediaPromise
  extends Promise<AggregateMedia>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMediaSubscription
  extends Promise<AsyncIterator<AggregateMedia>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface MediaConnection {
  pageInfo: PageInfo;
  edges: MediaEdge[];
}

export interface MediaConnectionPromise
  extends Promise<MediaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MediaEdge>>() => T;
  aggregate: <T = AggregateMediaPromise>() => T;
}

export interface MediaConnectionSubscription
  extends Promise<AsyncIterator<MediaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MediaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMediaSubscription>() => T;
}

export interface MediaPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  localSource: String;
  uploadUri?: String;
  bucket?: String;
  key?: String;
  region?: String;
}

export interface MediaPreviousValuesPromise
  extends Promise<MediaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  localSource: () => Promise<String>;
  uploadUri: () => Promise<String>;
  bucket: () => Promise<String>;
  key: () => Promise<String>;
  region: () => Promise<String>;
}

export interface MediaPreviousValuesSubscription
  extends Promise<AsyncIterator<MediaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  localSource: () => Promise<AsyncIterator<String>>;
  uploadUri: () => Promise<AsyncIterator<String>>;
  bucket: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Comment {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  text: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  listing: <T = ListingPromise>() => T;
  replies: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  photos: <T = FragmentableArray<Media>>(
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user: <T = UserPromise>() => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  listing: <T = ListingSubscription>() => T;
  replies: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  photos: <T = Promise<AsyncIterator<MediaSubscription>>>(
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user: <T = UserSubscription>() => T;
}

export interface ListingEdge {
  node: Listing;
  cursor: String;
}

export interface ListingEdgePromise extends Promise<ListingEdge>, Fragmentable {
  node: <T = ListingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ListingEdgeSubscription
  extends Promise<AsyncIterator<ListingEdge>>,
    Fragmentable {
  node: <T = ListingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MediaEdge {
  node: Media;
  cursor: String;
}

export interface MediaEdgePromise extends Promise<MediaEdge>, Fragmentable {
  node: <T = MediaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MediaEdgeSubscription
  extends Promise<AsyncIterator<MediaEdge>>,
    Fragmentable {
  node: <T = MediaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ListingPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
  price?: String;
}

export interface ListingPreviousValuesPromise
  extends Promise<ListingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<String>;
}

export interface ListingPreviousValuesSubscription
  extends Promise<AsyncIterator<ListingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
}

export interface ListingSubscriptionPayload {
  mutation: MutationType;
  node: Listing;
  updatedFields: String[];
  previousValues: ListingPreviousValues;
}

export interface ListingSubscriptionPayloadPromise
  extends Promise<ListingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ListingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ListingPreviousValuesPromise>() => T;
}

export interface ListingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ListingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ListingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ListingPreviousValuesSubscription>() => T;
}

export interface MediaSubscriptionPayload {
  mutation: MutationType;
  node: Media;
  updatedFields: String[];
  previousValues: MediaPreviousValues;
}

export interface MediaSubscriptionPayloadPromise
  extends Promise<MediaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MediaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MediaPreviousValuesPromise>() => T;
}

export interface MediaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MediaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MediaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MediaPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  text: String;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface AggregateListing {
  count: Int;
}

export interface AggregateListingPromise
  extends Promise<AggregateListing>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateListingSubscription
  extends Promise<AsyncIterator<AggregateListing>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ListingConnection {
  pageInfo: PageInfo;
  edges: ListingEdge[];
}

export interface ListingConnectionPromise
  extends Promise<ListingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ListingEdge>>() => T;
  aggregate: <T = AggregateListingPromise>() => T;
}

export interface ListingConnectionSubscription
  extends Promise<AsyncIterator<ListingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ListingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateListingSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "ExchangeType",
    embedded: false
  },
  {
    name: "Listing",
    embedded: false
  },
  {
    name: "Media",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
